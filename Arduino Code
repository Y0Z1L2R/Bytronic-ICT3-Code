//input Top Section Wire
int IP8 = A15;
int IP6 = A14; //Start Button (Inital State = 0, Pressing State = 1)
int IP4 = A13;
int IP2 = A12;
int IP0 = A11; //Filter Inductor on top (Detect = 1, No Detect = 0)

//input Bottom Section Wire
int IP7 = A10; //Stop Button (Inital State = 1, Pressing State = 0)
int IP5 = A9;
int IP3 = A8; //(This is the capacitor)
int IP1 = A7; //Filter IR Sensor on top (Detect = 1, No Detect = 0)

//Output Top Section Wire
int ROP4 = 6;
int ROP2 = 5;
int ROP0 = 4;

//Output Bottom Section Wire
int ROP3 = 3;
int ROP1 = 2;

//Flag
int i;

//Array Variable
int check[10];
int array = 0;

//Assembly Flag
int AssemCheck = 0;

//Push Flag
int IRsensorTimer = 0;
int Skip = 0;

//Metal Peg Detected Variable
int SortPeg = 0; //Flag to determine wether to star counting metal peg

//Lid 
int lid = 0;

//Piston Flag
int PistonOne = 0;

//Dropper Flag
int DropperState = 0;

//Filter time
unsigned long filter_currentTime;
unsigned long filter_previousTime;
unsigned long filterResetTime = 2000; //2000ms
unsigned long filter_pistoncurrentTime;
unsigned long filter_pistonpreviousTime;
unsigned long filter_pistonTime = 500; //500ms

//Lid Dropper Timer
unsigned long Dropper_currentTime;
unsigned long Dropper_previousTime;
unsigned long Dropper_Time = 1000; //1000ms
unsigned long Dropper_closecurrentTime;
unsigned long Dropper_closepreviousTime;
unsigned long Dropper_closeTime = 100; //100ms

///Skip Timer
unsigned long Skip_currentTime;
unsigned long Skip_previousTime;
unsigned long Skip_Time = 1500; //1500ms

//Push Timer
unsigned long Piston_currentTime;
unsigned long Piston_previousTime;
unsigned long Piston_Time = 500; //500ms

//State
int Bytronic_State = 0; // Off State = 0, On State = 1

void setup() {
  // Input Pin
  pinMode(IP8, INPUT);
  pinMode(IP6, INPUT);
  pinMode(IP4, INPUT);
  pinMode(IP2, INPUT);
  pinMode(IP0, INPUT);
  pinMode(IP7, INPUT);
  pinMode(IP5, INPUT);
  pinMode(IP3, INPUT);
  pinMode(IP1, INPUT);

  // Output Pin
  pinMode(ROP4, OUTPUT);
  pinMode(ROP2, OUTPUT);  
  pinMode(ROP0, OUTPUT);
  pinMode(ROP3, OUTPUT);
  pinMode(ROP1, OUTPUT);

  for (int ind = 0; ind < 10; ind++) {
    check[ind] = 0;
  }
  Serial.begin(9600);
}

int Status() {
  int ir7 = digitalRead(IP7);  // Stop button
  int ir6 = digitalRead(IP6);  // Start button
  if (ir7 == HIGH && ir6 == HIGH) return Bytronic_State = 1;
  else if (ir7 == LOW && ir6 == LOW) return Bytronic_State = 0;
  else return Bytronic_State = Bytronic_State; //Precaution
}

void FilteringMetal() { //To Filter Metal, Initially when there is no metal peg (State = 0), If metal peg is detected (SortPeg = 1)
  int ir0 = analogRead(IP0);
  if (ir0>800 && SortPeg == 0) {
    filter_previousTime = millis();
    SortPeg = 1;
  }
  if (SortPeg == 1){
    filter_currentTime = millis();
    if (filter_currentTime - filter_previousTime > filterResetTime){
      SortPeg = 0;
    }
  }
}

void FilteringLid() {
  int ir1 = analogRead(IP1);
  if (PistonOne == 0 && SortPeg == 0 && ir1 > 800){
    digitalWrite(ROP1, HIGH);
    Serial.println("Plastic detected, Push");
    PistonOne = 1;
    Dropper_previousTime = millis(); //Later add in counting lid
    filter_pistonpreviousTime = millis();
  }
}

void PistonOneTime(){
  if (PistonOne == 1){
    filter_pistoncurrentTime = millis();
    if (filter_pistoncurrentTime - filter_pistonpreviousTime > filter_pistonTime){
      digitalWrite(ROP1, LOW);
      Serial.println("Pull");
      lid += 1;
      PistonOne = 0;
    }
  }
}

void Droplid() {
  int ir2 = analogRead(IP2);
  if (ir2 > 800 && DropperState == 1) {
    Dropper_closecurrentTime = millis();
    if (Dropper_closecurrentTime - Dropper_closepreviousTime > Dropper_closeTime){
      digitalWrite(ROP2, LOW);
      DropperState = 0;
    }
  } else if (ir2 <= 800 && lid > 0 && DropperState == 0) {
    Dropper_currentTime = millis();
    if(Dropper_currentTime - Dropper_previousTime > Dropper_Time){
      digitalWrite(ROP2, HIGH);
      Dropper_closepreviousTime = millis();
      DropperState = 1;
      lid -= 1; 
    }
  }
}

void CheckingAssembly() {
  // Read sensor values
  int ir8 = analogRead(IP8);
  int ir3 = analogRead(IP3);

  // Debugging sensor values
  Serial.print("IR8: "); Serial.println(ir8);
  Serial.print("IR3: "); Serial.println(ir3);

  if (ir3 <= 800 && AssemCheck == 0){ //Correct
    AssemCheck = 1; 
  }

  else if (ir8 > 800 && ir3 > 800 && AssemCheck == 0){ //Incorrect
    AssemCheck = 2;
  }
}

void AssemblyMark(){
  int ir4 = analogRead(IP4);

  Serial.print("IR4: "); Serial.println(ir4);
  if (ir4 < 800 && AssemCheck == 1){      //Perfect Assembly
    if (array < 10) {  // Prevent overflow
        check[array] = 1;
        array++;
        Serial.println("Object detected and added to check[1]");
        AssemCheck = 0;  // Debounce to prevent multiple detections
    }
  }
  if (ir4 < 800 && AssemCheck == 2){      //Imperfect Assembly
    if (array < 10) {  // Prevent overflow
        check[array] = 0;
        array++;
        Serial.println("Object detected and added to check[1]");
        AssemCheck = 0;  // Debounce to prevent multiple detections
    }
  }
}

void Push() {
  int ir5 = analogRead(IP5);  // Read the input from the push trigger sensor
  Serial.print("Push Trigger Sensor (ir5): "); Serial.println(ir5);
  Serial.print("First Item in Queue (check[0]): "); Serial.println(check[0]);

  if (ir5 > 800 && IRsensorTimer == 0) {  // Trigger detected
    if (check[0] == 0) {  // If the first item in the queue is "valid for push"
      Serial.println("Pushing item.");
      digitalWrite(ROP3, HIGH);  // Activate the pusher
      IRsensorTimer = 1;
      Piston_previousTime = millis();
    } 
    else if (check[0] == 1 && IRsensorTimer == 0) {
      Serial.println("Skipping push: Invalid item detected.");
      Skip = 1;
      Skip_previousTime = millis();
      IRsensorTimer = 1;
    }

    // Shift the queue
    if (Skip = 0){
      for (i = 0; i < 9; i++) {
        check[i] = check[i + 1];
      }
      check[9] = 0;  // Clear the last slot
    }
    // Decrement the active array size
    if (array > 0) {
      array--;
    }
  }
}

void PistonClose(){
  if (IRsensorTimer == 1){
    Piston_currentTime = millis();
    if (Piston_currentTime - Piston_previousTime > Piston_Time){
      IRsensorTimer = 0;
      digitalWrite(ROP3, LOW);
    }
  }
  if (Skip == 1){
    Skip_currentTime = millis();
    if (Skip_currentTime - Skip_previousTime > Skip_Time){
      Skip = 0;
      digitalWrite(ROP3, LOW);
    }
  }
}

void loop() { 
  while (Status()) {
    //Conveyer belt On
    digitalWrite(ROP4, Bytronic_State);
    digitalWrite(ROP0, Bytronic_State);

    //Filtering Metal Peg and Lid
    FilteringMetal();

    //Filtering Lid
    FilteringLid();
    PistonOneTime();

    //DroppingLid
    Droplid();

    CheckingAssembly();
    AssemblyMark();

    // Push Part
    Push();
    PistonClose();

    // Serial.print("Array: "); Serial.println(array);
    // Serial.print("check[0]: "); Serial.println(check[0]);
    Serial.println(AssemCheck);
  }

  //Conveyer belt off
  digitalWrite(ROP4, Bytronic_State);
  digitalWrite(ROP0, Bytronic_State);
}
